package com.example.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.example.greenBean.CacheBean;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CACHE_BEAN.
 */
public class CacheBeanDao extends AbstractDao<CacheBean, String> {

    public static final String TABLENAME = "CACHE_BEAN";

    /**
     * Properties of entity CacheBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property JsonKey = new Property(0, String.class, "JsonKey", true, "JSON_KEY");
        public final static Property JsonContent = new Property(1, String.class, "JsonContent", false, "JSON_CONTENT");
        public final static Property CacheTime = new Property(2, String.class, "CacheTime", false, "CACHE_TIME");
    }




    public CacheBeanDao(DaoConfig config) {
        super(config);
    }

    public CacheBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CACHE_BEAN' (" + //
                "'JSON_KEY' TEXT PRIMARY KEY NOT NULL," + // 0: JsonKey
                "'JSON_CONTENT' TEXT," + // 1: JsonContent
                "'CACHE_TIME' TEXT);"); // 2: CacheTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CACHE_BEAN'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, CacheBean entity) {
        stmt.clearBindings();

        String JsonKey = entity.getJsonKey();
        if (JsonKey != null) {
            stmt.bindString(1, JsonKey);
        }

        String JsonContent = entity.getJsonContent();
        if (JsonContent != null) {
            stmt.bindString(2, JsonContent);
        }

        String CacheTime = entity.getCacheTime();
        if (CacheTime != null) {
            stmt.bindString(3, CacheTime);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public CacheBean readEntity(Cursor cursor, int offset) {
        CacheBean entity = new CacheBean( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // JsonKey
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // JsonContent
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // CacheTime
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, CacheBean entity, int offset) {
        entity.setJsonKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJsonContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCacheTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(CacheBean entity, long rowId) {
        // Unsupported or missing PK type
        return entity.getJsonKey();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(CacheBean entity) {
        if (entity != null) {
            return entity.getJsonKey();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
