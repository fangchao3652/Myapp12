package com.example.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;


import com.example.greenBean.BrandDetailBean;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table BRAND_DETAIL_BEAN.
 */
public class BrandDetailBeanDao extends AbstractDao<BrandDetailBean, String> {

    public static final String TABLENAME = "BRAND_DETAIL_BEAN";

    /**
     * Properties of entity BrandDetailBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BrandID = new Property(0, String.class, "BrandID", true, "BRAND_ID");
        public final static Property BrandName = new Property(1, String.class, "BrandName", false, "BRAND_NAME");
        public final static Property CategoryList = new Property(2, String.class, "CategoryList", false, "CATEGORY_LIST");
        public final static Property SortOrder = new Property(3, Integer.class, "SortOrder", false, "SORT_ORDER");
        public final static Property Image = new Property(4, String.class, "Image", false, "IMAGE");
    }

    ;


    public BrandDetailBeanDao(DaoConfig config) {
        super(config);
    }

    public BrandDetailBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'BRAND_DETAIL_BEAN' (" + //
                "'BRAND_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: BrandID
                "'BRAND_NAME' TEXT," + // 1: BrandName
                "'CATEGORY_LIST' TEXT," + // 2: CategoryList
                "'SORT_ORDER' INTEGER," + // 3: SortOrder
                "'IMAGE' TEXT);"); // 4: Image
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BRAND_DETAIL_BEAN'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, BrandDetailBean entity) {
        stmt.clearBindings();

        String BrandID = entity.getBrandID();
        if (BrandID != null) {
            stmt.bindString(1, BrandID);
        }

        String BrandName = entity.getBrandName();
        if (BrandName != null) {
            stmt.bindString(2, BrandName);
        }

        String CategoryList = entity.getCategoryList();
        if (CategoryList != null) {
            stmt.bindString(3, CategoryList);
        }

        Integer SortOrder = entity.getSortOrder();
        if (SortOrder != null) {
            stmt.bindLong(4, SortOrder);
        }

        String Image = entity.getImage();
        if (Image != null) {
            stmt.bindString(5, Image);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public BrandDetailBean readEntity(Cursor cursor, int offset) {
        BrandDetailBean entity = new BrandDetailBean( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // BrandID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BrandName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CategoryList
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // SortOrder
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Image
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, BrandDetailBean entity, int offset) {
        entity.setBrandID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBrandName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategoryList(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSortOrder(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(BrandDetailBean entity, long rowId) {
        return entity.getBrandID();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(BrandDetailBean entity) {
        if (entity != null) {
            return entity.getBrandID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
