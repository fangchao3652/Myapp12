package com.example.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;


import com.example.greenBean.BondedAreaBean;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table BONDED_AREA_BEAN.
*/
public class BondedAreaBeanDao extends AbstractDao<BondedAreaBean, String> {

    public static final String TABLENAME = "BONDED_AREA_BEAN";

    /**
     * Properties of entity BondedAreaBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BondedAreaName = new Property(0, String.class, "BondedAreaName", true, "BONDED_AREA_NAME");
    };


    public BondedAreaBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BondedAreaBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BONDED_AREA_BEAN' (" + //
                "'BONDED_AREA_NAME' TEXT PRIMARY KEY NOT NULL );"); // 0: BondedAreaName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BONDED_AREA_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BondedAreaBean entity) {
        stmt.clearBindings();
 
        String BondedAreaName = entity.getBondedAreaName();
        if (BondedAreaName != null) {
            stmt.bindString(1, BondedAreaName);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BondedAreaBean readEntity(Cursor cursor, int offset) {
        BondedAreaBean entity = new BondedAreaBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // BondedAreaName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BondedAreaBean entity, int offset) {
        entity.setBondedAreaName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BondedAreaBean entity, long rowId) {
        return entity.getBondedAreaName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BondedAreaBean entity) {
        if(entity != null) {
            return entity.getBondedAreaName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
