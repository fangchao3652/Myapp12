package com.example.greendao_fc;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.greendao_fc.CacheBean1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CACHE_BEAN1.
*/
public class CacheBean1Dao extends AbstractDao<CacheBean1, String> {

    public static final String TABLENAME = "CACHE_BEAN1";

    /**
     * Properties of entity CacheBean1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property JsonKey = new Property(0, String.class, "JsonKey", true, "JSON_KEY");
        public final static Property JsonCache = new Property(1, String.class, "JsonCache", false, "JSON_CACHE");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
    };


    public CacheBean1Dao(DaoConfig config) {
        super(config);
    }
    
    public CacheBean1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CACHE_BEAN1' (" + //
                "'JSON_KEY' TEXT PRIMARY KEY NOT NULL ," + // 0: JsonKey
                "'JSON_CACHE' TEXT," + // 1: JsonCache
                "'TIME' INTEGER);"); // 2: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CACHE_BEAN1'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CacheBean1 entity) {
        stmt.clearBindings();
 
        String JsonKey = entity.getJsonKey();
        if (JsonKey != null) {
            stmt.bindString(1, JsonKey);
        }
 
        String JsonCache = entity.getJsonCache();
        if (JsonCache != null) {
            stmt.bindString(2, JsonCache);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CacheBean1 readEntity(Cursor cursor, int offset) {
        CacheBean1 entity = new CacheBean1( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // JsonKey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // JsonCache
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CacheBean1 entity, int offset) {
        entity.setJsonKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJsonCache(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CacheBean1 entity, long rowId) {
        return entity.getJsonKey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CacheBean1 entity) {
        if(entity != null) {
            return entity.getJsonKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
